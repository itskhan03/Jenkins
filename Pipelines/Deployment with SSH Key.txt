pipeline {
    agent any
    parameters {
        string(name: 'DOCKER_IMAGE', defaultValue: '', description: 'Docker image to pull (e.g., registry.gitlab.com/wavetec-tempest/jwt-auth-server:vn-fix-5)')
        choice(name: 'SERVICE_NAME', choices: ['jwt-auth-server', 'inventory-service', 'transaction-service', 'portal-backend', 'oauth-server'], description: 'Select service to update')
    }
    environment {
        DOCKER_REGISTRY = 'registry.gitlab.com'
        CREDENTIALS_ID = 'gitlab-babar'
        LOCAL_REGISTRY_URL = '10.101.10.3:5000'
        LOCAL_REGISTRY_CREDENTIALS = 'local-registry'
        APP_SERVER_CREDENTIALS = '10.2-server-key'  // This is the SSH key credentials ID
        APP_SERVER_HOST = '10.101.10.2'
        APP_SERVER_DOCKER_COMPOSE_PATH = '/home/Portal/docker-compose.yml'
        SSH_KEY_PATH = '/root/.ssh/id_rsa'  // Path to your SSH private key
    }
    stages {
        stage('Pull and Push Docker Image') {
            steps {
                script {
                    def dockerImage = params.DOCKER_IMAGE
                    def serviceName = params.SERVICE_NAME
                    if (dockerImage == null || dockerImage.trim() == '' || serviceName == null || serviceName.trim() == '') {
                        error 'DOCKER_IMAGE and SERVICE_NAME parameters are required.'
                    }
                    def dockerImageName = dockerImage.split('/').last().split(':').first()
                    def dockerImageTag = dockerImage.split(':').last()
                    def localDockerImage = "${LOCAL_REGISTRY_URL}/${dockerImageName}:${dockerImageTag}"
                    
                    withCredentials([usernamePassword(credentialsId: env.CREDENTIALS_ID, passwordVariable: 'GITLAB_PASSWORD', usernameVariable: 'GITLAB_USERNAME')]) {
                        sh """
                            echo "$GITLAB_PASSWORD" | docker login -u "$GITLAB_USERNAME" --password-stdin $DOCKER_REGISTRY
                            docker pull $dockerImage
                        """
                    }
                    sh """
                        docker tag $dockerImage ${localDockerImage}
                    """
                    withCredentials([usernamePassword(credentialsId: env.LOCAL_REGISTRY_CREDENTIALS, passwordVariable: 'LOCAL_REGISTRY_PASSWORD', usernameVariable: 'LOCAL_REGISTRY_USERNAME')]) {
                        sh """
                            echo "$LOCAL_REGISTRY_PASSWORD" | docker login -u "$LOCAL_REGISTRY_USERNAME" --password-stdin $LOCAL_REGISTRY_URL
                            docker push ${localDockerImage}
                        """
                    }
                }
            }
        }
        stage('Deploy to Application Server') {
            steps {
                script {
                    def dockerImageName = params.DOCKER_IMAGE.split('/').last().split(':').first()
                    def dockerImageTag = params.DOCKER_IMAGE.split(':').last()
                    def localDockerImage = "${LOCAL_REGISTRY_URL}/${dockerImageName}:${dockerImageTag}"
                    def serviceName = params.SERVICE_NAME
                    
                    withCredentials([sshUserPrivateKey(credentialsId: env.APP_SERVER_CREDENTIALS, keyFileVariable: 'SSH_KEY', passphraseVariable: '', usernameVariable: 'SSH_USER')]) {
                        sh """
                            ssh -i ${SSH_KEY_PATH} ${SSH_USER}@${APP_SERVER_HOST} "sed -i '/${serviceName}:/,/image:/s|image: .*|image: ${localDockerImage}|' ${APP_SERVER_DOCKER_COMPOSE_PATH} &&
                            docker compose -f ${APP_SERVER_DOCKER_COMPOSE_PATH} pull ${serviceName} &&
                            docker compose -f ${APP_SERVER_DOCKER_COMPOSE_PATH} up -d ${serviceName}"
                        """
                    }
                }
            }
        }
    }
}
